//------------------------------------------------------------------------------
// <auto-generated>
//     이 코드는 도구를 사용하여 생성되었습니다.
//     런타임 버전:4.0.30319.42000
//
//     파일 내용을 변경하면 잘못된 동작이 발생할 수 있으며, 코드를 다시 생성하면
//     이러한 변경 내용이 손실됩니다.
// </auto-generated>
//------------------------------------------------------------------------------

namespace _1118_개미.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TradeRecord", Namespace="http://schemas.datacontract.org/2004/07/_1111_MemberSerivce.User")]
    [System.SerializableAttribute()]
    public partial class TradeRecord : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal BuyPriceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime BuyTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MarketField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal QuantityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal BuyPrice {
            get {
                return this.BuyPriceField;
            }
            set {
                if ((this.BuyPriceField.Equals(value) != true)) {
                    this.BuyPriceField = value;
                    this.RaisePropertyChanged("BuyPrice");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime BuyTime {
            get {
                return this.BuyTimeField;
            }
            set {
                if ((this.BuyTimeField.Equals(value) != true)) {
                    this.BuyTimeField = value;
                    this.RaisePropertyChanged("BuyTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Market {
            get {
                return this.MarketField;
            }
            set {
                if ((object.ReferenceEquals(this.MarketField, value) != true)) {
                    this.MarketField = value;
                    this.RaisePropertyChanged("Market");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Quantity {
            get {
                return this.QuantityField;
            }
            set {
                if ((this.QuantityField.Equals(value) != true)) {
                    this.QuantityField = value;
                    this.RaisePropertyChanged("Quantity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((object.ReferenceEquals(this.UserIdField, value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UpbitTicker", Namespace="http://schemas.datacontract.org/2004/07/_1111_MemberSerivce.User")]
    [System.SerializableAttribute()]
    public partial class UpbitTicker : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal change_priceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal change_rateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal trade_priceField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal change_price {
            get {
                return this.change_priceField;
            }
            set {
                if ((this.change_priceField.Equals(value) != true)) {
                    this.change_priceField = value;
                    this.RaisePropertyChanged("change_price");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal change_rate {
            get {
                return this.change_rateField;
            }
            set {
                if ((this.change_rateField.Equals(value) != true)) {
                    this.change_rateField = value;
                    this.RaisePropertyChanged("change_rate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal trade_price {
            get {
                return this.trade_priceField;
            }
            set {
                if ((this.trade_priceField.Equals(value) != true)) {
                    this.trade_priceField = value;
                    this.RaisePropertyChanged("trade_price");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UpbitCandle", Namespace="http://schemas.datacontract.org/2004/07/_1111_MemberSerivce.User")]
    [System.SerializableAttribute()]
    public partial class UpbitCandle : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime candle_date_time_kstField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal high_priceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal low_priceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal opening_priceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal trade_priceField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime candle_date_time_kst {
            get {
                return this.candle_date_time_kstField;
            }
            set {
                if ((this.candle_date_time_kstField.Equals(value) != true)) {
                    this.candle_date_time_kstField = value;
                    this.RaisePropertyChanged("candle_date_time_kst");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal high_price {
            get {
                return this.high_priceField;
            }
            set {
                if ((this.high_priceField.Equals(value) != true)) {
                    this.high_priceField = value;
                    this.RaisePropertyChanged("high_price");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal low_price {
            get {
                return this.low_priceField;
            }
            set {
                if ((this.low_priceField.Equals(value) != true)) {
                    this.low_priceField = value;
                    this.RaisePropertyChanged("low_price");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal opening_price {
            get {
                return this.opening_priceField;
            }
            set {
                if ((this.opening_priceField.Equals(value) != true)) {
                    this.opening_priceField = value;
                    this.RaisePropertyChanged("opening_price");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal trade_price {
            get {
                return this.trade_priceField;
            }
            set {
                if ((this.trade_priceField.Equals(value) != true)) {
                    this.trade_priceField = value;
                    this.RaisePropertyChanged("trade_price");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.ITradeService", CallbackContract=typeof(_1118_개미.ServiceReference1.ITradeServiceCallback))]
    public interface ITradeService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITradeService/Buy", ReplyAction="http://tempuri.org/ITradeService/BuyResponse")]
        bool Buy(string userId, string market, decimal price, decimal quantity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITradeService/Buy", ReplyAction="http://tempuri.org/ITradeService/BuyResponse")]
        System.Threading.Tasks.Task<bool> BuyAsync(string userId, string market, decimal price, decimal quantity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITradeService/Sell", ReplyAction="http://tempuri.org/ITradeService/SellResponse")]
        bool Sell(string userId, string market, decimal quantity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITradeService/Sell", ReplyAction="http://tempuri.org/ITradeService/SellResponse")]
        System.Threading.Tasks.Task<bool> SellAsync(string userId, string market, decimal quantity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITradeService/GetBalance", ReplyAction="http://tempuri.org/ITradeService/GetBalanceResponse")]
        decimal GetBalance(string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITradeService/GetBalance", ReplyAction="http://tempuri.org/ITradeService/GetBalanceResponse")]
        System.Threading.Tasks.Task<decimal> GetBalanceAsync(string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITradeService/GetTotalAssets", ReplyAction="http://tempuri.org/ITradeService/GetTotalAssetsResponse")]
        decimal GetTotalAssets(string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITradeService/GetTotalAssets", ReplyAction="http://tempuri.org/ITradeService/GetTotalAssetsResponse")]
        System.Threading.Tasks.Task<decimal> GetTotalAssetsAsync(string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITradeService/GetAvailableQuantity", ReplyAction="http://tempuri.org/ITradeService/GetAvailableQuantityResponse")]
        decimal GetAvailableQuantity(string userId, string market);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITradeService/GetAvailableQuantity", ReplyAction="http://tempuri.org/ITradeService/GetAvailableQuantityResponse")]
        System.Threading.Tasks.Task<decimal> GetAvailableQuantityAsync(string userId, string market);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITradeService/GetMarketNames", ReplyAction="http://tempuri.org/ITradeService/GetMarketNamesResponse")]
        System.Collections.Generic.Dictionary<string, string> GetMarketNames();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITradeService/GetMarketNames", ReplyAction="http://tempuri.org/ITradeService/GetMarketNamesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, string>> GetMarketNamesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITradeService/GetMarketByIndex", ReplyAction="http://tempuri.org/ITradeService/GetMarketByIndexResponse")]
        string GetMarketByIndex(int index);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITradeService/GetMarketByIndex", ReplyAction="http://tempuri.org/ITradeService/GetMarketByIndexResponse")]
        System.Threading.Tasks.Task<string> GetMarketByIndexAsync(int index);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITradeService/GetMarketName", ReplyAction="http://tempuri.org/ITradeService/GetMarketNameResponse")]
        string GetMarketName(string market);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITradeService/GetMarketName", ReplyAction="http://tempuri.org/ITradeService/GetMarketNameResponse")]
        System.Threading.Tasks.Task<string> GetMarketNameAsync(string market);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITradeService/GetTradeRecords", ReplyAction="http://tempuri.org/ITradeService/GetTradeRecordsResponse")]
        _1118_개미.ServiceReference1.TradeRecord[] GetTradeRecords(string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITradeService/GetTradeRecords", ReplyAction="http://tempuri.org/ITradeService/GetTradeRecordsResponse")]
        System.Threading.Tasks.Task<_1118_개미.ServiceReference1.TradeRecord[]> GetTradeRecordsAsync(string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITradeService/GetCurrentPrice", ReplyAction="http://tempuri.org/ITradeService/GetCurrentPriceResponse")]
        _1118_개미.ServiceReference1.UpbitTicker GetCurrentPrice(string market);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITradeService/GetCurrentPrice", ReplyAction="http://tempuri.org/ITradeService/GetCurrentPriceResponse")]
        System.Threading.Tasks.Task<_1118_개미.ServiceReference1.UpbitTicker> GetCurrentPriceAsync(string market);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITradeService/GetCandles", ReplyAction="http://tempuri.org/ITradeService/GetCandlesResponse")]
        _1118_개미.ServiceReference1.UpbitCandle[] GetCandles(string market);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITradeService/GetCandles", ReplyAction="http://tempuri.org/ITradeService/GetCandlesResponse")]
        System.Threading.Tasks.Task<_1118_개미.ServiceReference1.UpbitCandle[]> GetCandlesAsync(string market);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITradeService/TradeInfosCallback")]
        void TradeInfosCallback(string userId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITradeService/TradeInfosCallback")]
        System.Threading.Tasks.Task TradeInfosCallbackAsync(string userId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITradeServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITradeService/UpdateTradeInfo")]
        void UpdateTradeInfo(string market, string marketName, decimal totalQuantity, decimal averagePrice, decimal currentPrice);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITradeService/NotifyError")]
        void NotifyError(string message);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITradeServiceChannel : _1118_개미.ServiceReference1.ITradeService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TradeServiceClient : System.ServiceModel.DuplexClientBase<_1118_개미.ServiceReference1.ITradeService>, _1118_개미.ServiceReference1.ITradeService {
        
        public TradeServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public TradeServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public TradeServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public TradeServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public TradeServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public bool Buy(string userId, string market, decimal price, decimal quantity) {
            return base.Channel.Buy(userId, market, price, quantity);
        }
        
        public System.Threading.Tasks.Task<bool> BuyAsync(string userId, string market, decimal price, decimal quantity) {
            return base.Channel.BuyAsync(userId, market, price, quantity);
        }
        
        public bool Sell(string userId, string market, decimal quantity) {
            return base.Channel.Sell(userId, market, quantity);
        }
        
        public System.Threading.Tasks.Task<bool> SellAsync(string userId, string market, decimal quantity) {
            return base.Channel.SellAsync(userId, market, quantity);
        }
        
        public decimal GetBalance(string userId) {
            return base.Channel.GetBalance(userId);
        }
        
        public System.Threading.Tasks.Task<decimal> GetBalanceAsync(string userId) {
            return base.Channel.GetBalanceAsync(userId);
        }
        
        public decimal GetTotalAssets(string userId) {
            return base.Channel.GetTotalAssets(userId);
        }
        
        public System.Threading.Tasks.Task<decimal> GetTotalAssetsAsync(string userId) {
            return base.Channel.GetTotalAssetsAsync(userId);
        }
        
        public decimal GetAvailableQuantity(string userId, string market) {
            return base.Channel.GetAvailableQuantity(userId, market);
        }
        
        public System.Threading.Tasks.Task<decimal> GetAvailableQuantityAsync(string userId, string market) {
            return base.Channel.GetAvailableQuantityAsync(userId, market);
        }
        
        public System.Collections.Generic.Dictionary<string, string> GetMarketNames() {
            return base.Channel.GetMarketNames();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, string>> GetMarketNamesAsync() {
            return base.Channel.GetMarketNamesAsync();
        }
        
        public string GetMarketByIndex(int index) {
            return base.Channel.GetMarketByIndex(index);
        }
        
        public System.Threading.Tasks.Task<string> GetMarketByIndexAsync(int index) {
            return base.Channel.GetMarketByIndexAsync(index);
        }
        
        public string GetMarketName(string market) {
            return base.Channel.GetMarketName(market);
        }
        
        public System.Threading.Tasks.Task<string> GetMarketNameAsync(string market) {
            return base.Channel.GetMarketNameAsync(market);
        }
        
        public _1118_개미.ServiceReference1.TradeRecord[] GetTradeRecords(string userId) {
            return base.Channel.GetTradeRecords(userId);
        }
        
        public System.Threading.Tasks.Task<_1118_개미.ServiceReference1.TradeRecord[]> GetTradeRecordsAsync(string userId) {
            return base.Channel.GetTradeRecordsAsync(userId);
        }
        
        public _1118_개미.ServiceReference1.UpbitTicker GetCurrentPrice(string market) {
            return base.Channel.GetCurrentPrice(market);
        }
        
        public System.Threading.Tasks.Task<_1118_개미.ServiceReference1.UpbitTicker> GetCurrentPriceAsync(string market) {
            return base.Channel.GetCurrentPriceAsync(market);
        }
        
        public _1118_개미.ServiceReference1.UpbitCandle[] GetCandles(string market) {
            return base.Channel.GetCandles(market);
        }
        
        public System.Threading.Tasks.Task<_1118_개미.ServiceReference1.UpbitCandle[]> GetCandlesAsync(string market) {
            return base.Channel.GetCandlesAsync(market);
        }
        
        public void TradeInfosCallback(string userId) {
            base.Channel.TradeInfosCallback(userId);
        }
        
        public System.Threading.Tasks.Task TradeInfosCallbackAsync(string userId) {
            return base.Channel.TradeInfosCallbackAsync(userId);
        }
    }
}
